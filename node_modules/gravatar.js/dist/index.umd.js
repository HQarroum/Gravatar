!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).gravatar=t()}(this,(function(){"use strict";const e="https://secure.gravatar.com",t="404",n="G",o="80",r=e=>(e=>{for(var t=[],n=0;n<64;)t[n]=0|4294967296*Math.sin(++n%Math.PI);var o,r,a,s=[o=1732584193,r=4023233417,~o,~r],i=[],f=unescape(encodeURI(e))+"Â€",c=f.length;for(e=--c/4+2|15,i[--e]=8*c;~c;)i[c>>2]|=f.charCodeAt(c)<<8*c--;for(n=f=0;n<e;n+=16){for(c=s;f<64;c=[a=c[3],o+((a=c[0]+[o&r|~o&a,a&o|~a&r,o^r^a,r^(o|~a)][c=f>>4]+t[f]+~~i[n|15&[f,5*f+1,3*f+5,7*f][c]])<<(c=[7,12,17,22,5,9,14,20,4,11,16,23,6,10,15,21][4*c+f++%4])|a>>>-c),o,r])o=0|c[1],r=c[2];for(f=4;f;)s[--f]+=c[f]}for(e="";f<32;)e+=(s[f>>3]>>4*(1^f++)&15).toString(16);return e})(e.trim().toLowerCase()),a=async function(){return"undefined"!=typeof window?window.fetch(...arguments):await import("node-fetch").then((e=>e.default(...arguments)))};return{url(a,s={}){const i={d:s.defaultIcon||t,r:s.rating||n,s:s.size||o};return`${e}/avatar/${r(a)}?${f=i,Object.entries(f).map((e=>e.map(encodeURIComponent).join("="))).join("&")}`;var f},async profiles(t,n={format:"json"}){const o=`${e}/${!1===n.hash?t:r(t)}.${n.format}`;return a(o).then((e=>e.json())).then((e=>e.entry))},async resolve(e,t={}){const n=this.url(e,t);return a(n,{method:"HEAD"}).then((e=>200===e.status?n:Promise.reject("Avatar does not exist")))}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
